<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="E(xH[-y8v$%-d))#lM)]" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Ppney7K#VJ`erW084u-=" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Motor {" line1="    M1_P8_P1," line2="    M2_P9_P2" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="oL!I3GJphM4=B]#aED8c" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Motor_dir {" line1="    forward," line2="    backward" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="//M}eS38J.,PVj`CUp_)" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace L9110_Car {" line1="" line2="    //% blockId=&quot;L9110M1&quot; block=&quot;M1 (P8, P1)| dir %d&quot;" line3="    export function set_dirM1(d: Motor_dir): void {" line4="        if (Motor_dir.forward) {" line5="            pins.digitalWritePin(DigitalPin.P8, 1)" line6="            pins.digitalWritePin(DigitalPin.P1, 0)" line7="        }" line8="        if (Motor_dir.backward) {" line9="            pins.digitalWritePin(DigitalPin.P8, 0)" line10="            pins.digitalWritePin(DigitalPin.P1, 1)" line11="        }" line12="    }" line13="" line14="    //% blockId=&quot;L9110M2&quot; block=&quot;M2 (P9, P2)| dir %d&quot;" line15="    export function set_dirM2(d: Motor_dir): void {" line16="        if (Motor_dir.forward) {" line17="            pins.digitalWritePin(DigitalPin.P9, 1)" line18="            pins.digitalWritePin(DigitalPin.P2, 0)" line19="        }" line20="        if (Motor_dir.backward) {" line21="            pins.digitalWritePin(DigitalPin.P9, 0)" line22="            pins.digitalWritePin(DigitalPin.P2, 1)" line23="        }" line24="    }" line25="" line26="    //% blockId=&quot;L9110Stop&quot; block=&quot;Motor Stop&quot;" line27="    export function set_stop(): void {" line28="        pins.digitalWritePin(DigitalPin.P8, 0)" line29="        pins.digitalWritePin(DigitalPin.P1, 0)" line30="        pins.digitalWritePin(DigitalPin.P9, 0)" line31="        pins.digitalWritePin(DigitalPin.P2, 0)" line32="    }" line33="}" numlines="34"></mutation></block></next></block></next></block></statement></block></xml>